{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","Burger","ingredients","Button","btnType","clicked","checkoutCancel","checkoutContinue","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","touched","street","zipCode","maxLength","country","email","deliveryTime","options","displayValue","loading","isValid","orderHandler","event","preventDefault","formData","elem","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputId","updatedFormElement","updateObject","target","validate","updatedOrderForm","validForm","input","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","showValidation","changed","disabled","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","orderActions","withErrorHandler","axios","Checkout","checkoutCancelHandler","history","goBack","checkoutContinueHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.2eeb19dc.chunk.js","sourcesContent":["import React from \"react\";\nimport Burger from \"../../Burger/Burger\";\n\nimport Button from \"../../UI/Button/Button\";\nimport classes from \"./CheckoutSummary.module.css\";\n\nconst checkoutSummary = (props) => {\n  return (\n    <div className={classes.CheckoutSummary}>\n      <h1>Have a good meal!</h1>\n      <div style={{ width: \"100%\" }}>\n        <Burger ingredients={props.ingredients} />\n      </div>\n      <Button btnType=\"Danger\" clicked={props.checkoutCancel}>\n        CANCEL\n      </Button>\n      <Button btnType=\"Success\" clicked={props.checkoutContinue}>\n        CONTINUE\n      </Button>\n    </div>\n  );\n};\n\nexport default checkoutSummary;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.module.css\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport axios from \"../../../axios-orders\";\nimport Input from \"../../../components//UI//Input/Input\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport * as orderActions from \"../../../store/actions/index\";\nimport { updateObject, validate } from \"../../../shared/utilities\";\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your name\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 3,\n        },\n        valid: false,\n        touched: false,\n      },\n      street: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Street\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      zipCode: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"ZIP Code\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5,\n        },\n        valid: false,\n        touched: false,\n      },\n      country: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Country\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Email\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      deliveryTime: {\n        elementType: \"select\",\n        elementConfig: {\n          options: [\n            {\n              value: \"asap\",\n              displayValue: \"ASAP\",\n            },\n            {\n              value: \"normal\",\n              displayValue: \"Normal\",\n            },\n          ],\n        },\n        valid: true,\n        value: \"asap\",\n      },\n    },\n    loading: false,\n    isValid: false,\n  };\n\n  orderHandler = (event) => {\n    event.preventDefault(); // prevents default behaviour\n    //in our case it doesn't send a request and it doesn't reload the page\n\n    const formData = {};\n    for (let elem in this.state.orderForm) {\n      formData[elem] = this.state.orderForm[elem].value;\n    }\n\n    const order = {\n      ingredients: this.props.ings,\n      price: this.props.price, // this would be calculated on the server in real apps\n      orderData: formData,\n      userId: this.props.userId,\n    };\n\n    this.props.onOrderBurger(order, this.props.token);\n  };\n\n  inputChangedHandler = (event, inputId) => {\n    // updatedOrderForm is a copy of orderForm and does not refer to original object\n    // but, since we have nested objects, those objects are still actually pointers, so they are not cloned\n    // modifying those nested objects will result in modifying the original saved value\n    // therefore we must copy the nested item we use as well\n    const updatedFormElement = updateObject(this.state.orderForm[inputId], {\n      value: event.target.value,\n      valid: validate(\n        event.target.value,\n        this.state.orderForm[inputId].validation\n      ),\n      touched: true,\n    });\n\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputId]: updatedFormElement,\n    });\n\n    let validForm = true;\n    for (let input in updatedOrderForm) {\n      validForm = updatedOrderForm[input].valid && validForm;\n    }\n\n    this.setState({ orderForm: updatedOrderForm, isValid: validForm });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key],\n      });\n    }\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map((formElement) => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            showValidation={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\n          />\n        ))}\n        <Button btnType=\"Success\" disabled={!this.state.isValid}>\n          ORDER\n        </Button>\n      </form>\n    );\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your contact data</h4>\n        {form}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProp = (state) => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onOrderBurger: (orderData, token) =>\n      dispatch(orderActions.purchaseBurger(orderData, token)),\n  };\n};\n\nexport default connect(\n  mapStateToProp,\n  mapDispatchToProps\n)(withErrorHandler(ContactData, axios));\n","import React, { Component } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\nimport ContactData from \"../Checkout/ContactData/ContactData\";\n\nimport { connect } from \"react-redux\";\n\nclass Checkout extends Component {\n  // componentWillMount() {\n  //   // // it's not nested so it will always mount\n  //   // const query = new URLSearchParams(this.props.location.search);\n  //   // const ingredients = {};\n  //   // let price = 0;\n  //   // for (let param of query.entries()) {\n  //   //   if (param[0] === \"price\") {\n  //   //     price = param[1];\n  //   //   } else {\n  //   //     ingredients[param[0]] = +param[1]; // + converts into number\n  //   //   }\n  //   // }\n  //   // this.setState({ ingredients: ingredients, price: price });\n  // }\n\n  checkoutCancelHandler = () => {\n    this.props.history.goBack();\n  };\n\n  checkoutContinueHandler = () => {\n    this.props.history.replace(\"/checkout/contact-data\");\n  };\n\n  render() {\n    let summary = <Redirect to=\"/\" />;\n    if (this.props.ings) {\n      const purchasedRedirect = this.props.purchased ? (\n        <Redirect to=\"/\" />\n      ) : null;\n\n      summary = (\n        <div>\n          {purchasedRedirect}\n          <CheckoutSummary\n            ingredients={this.props.ings}\n            checkoutCancel={this.checkoutCancelHandler}\n            checkoutContinue={this.checkoutContinueHandler}\n          />\n          <Route\n            path={this.props.match.path + \"/contact-data\"}\n            component={ContactData}\n          />\n        </div>\n      );\n    }\n    return summary;\n  }\n}\n\nconst mapStateToProp = (state) => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased,\n  };\n};\n\n\nexport default connect(mapStateToProp)(Checkout);\n","import React from \"react\";\nimport classes from \"./Input.module.css\";\nconst input = (props) => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n\n  if (props.invalid && props.showValidation && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          className={inputClasses.join(\" \")}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\",\"Input\":\"ContactData_Input__2fK5-\"};"],"sourceRoot":""}