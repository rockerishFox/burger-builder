{"ast":null,"code":"var _jsxFileName = \"/Users/deliacsiki/Projects/React/_Git/Burger Builder/burger-builder/src/components/Burger/Burger.js\";\nimport React from \"react\";\nimport { withRouter } from 'react-router-dom'; // adds match, history, location to component \n\nimport classes from \"./Burger.module.css\";\nimport BurgerIngredient from \"./BurgerIngredient/BurgerIngredient\";\n\nconst burger = props => {\n  // we transform the object with (key:value) pairs into an array of BurgerIngredients\n  // where the value = how many ingredients and key = type of ingredient\n  let ingredientsArray = Object.keys(props.ingredients).map(key => {\n    return [...Array(props.ingredients[key])].map((_, index) => {\n      return /*#__PURE__*/React.createElement(BurgerIngredient, {\n        key: key + index,\n        type: key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 16\n        }\n      });\n    });\n  }).reduce((prev, current) => {\n    return prev.concat(current);\n  }, []);\n\n  if (ingredientsArray.length === 0) {\n    ingredientsArray = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 24\n      }\n    }, \"Please start adding ingredients!\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Burger,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BurgerIngredient, {\n    type: \"bread-top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }), ingredientsArray, /*#__PURE__*/React.createElement(BurgerIngredient, {\n    type: \"bread-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default withRouter(burger);","map":{"version":3,"sources":["/Users/deliacsiki/Projects/React/_Git/Burger Builder/burger-builder/src/components/Burger/Burger.js"],"names":["React","withRouter","classes","BurgerIngredient","burger","props","ingredientsArray","Object","keys","ingredients","map","key","Array","_","index","reduce","prev","current","concat","length","Burger"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B,C,CAA+C;;AAC/C,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,gBAAP,MAA6B,qCAA7B;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACxB;AACA;AACA,MAAIC,gBAAgB,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACI,WAAlB,EACpBC,GADoB,CACfC,GAAD,IAAS;AACZ,WAAO,CAAC,GAAGC,KAAK,CAACP,KAAK,CAACI,WAAN,CAAkBE,GAAlB,CAAD,CAAT,EAAmCD,GAAnC,CAAuC,CAACG,CAAD,EAAIC,KAAJ,KAAc;AAC1D,0BAAO,oBAAC,gBAAD;AAAkB,QAAA,GAAG,EAAEH,GAAG,GAAGG,KAA7B;AAAoC,QAAA,IAAI,EAAEH,GAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFM,CAAP;AAGD,GALoB,EAMpBI,MANoB,CAMb,CAACC,IAAD,EAAOC,OAAP,KAAmB;AACzB,WAAOD,IAAI,CAACE,MAAL,CAAYD,OAAZ,CAAP;AACD,GARoB,EAQlB,EARkB,CAAvB;;AAUA,MAAIX,gBAAgB,CAACa,MAAjB,KAA4B,CAAhC,EAAmC;AACjCb,IAAAA,gBAAgB,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAnB;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAEJ,OAAO,CAACkB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGd,gBAFH,eAGE,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAC,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD,CAxBD;;AA0BA,eAAeL,UAAU,CAACG,MAAD,CAAzB","sourcesContent":["import React from \"react\";\nimport { withRouter } from 'react-router-dom'; // adds match, history, location to component \nimport classes from \"./Burger.module.css\";\nimport BurgerIngredient from \"./BurgerIngredient/BurgerIngredient\";\n\nconst burger = (props) => {\n  // we transform the object with (key:value) pairs into an array of BurgerIngredients\n  // where the value = how many ingredients and key = type of ingredient\n  let ingredientsArray = Object.keys(props.ingredients)\n    .map((key) => {\n      return [...Array(props.ingredients[key])].map((_, index) => {\n        return <BurgerIngredient key={key + index} type={key} />;\n      });\n    })\n    .reduce((prev, current) => {\n      return prev.concat(current);\n    }, []);\n\n  if (ingredientsArray.length === 0) {\n    ingredientsArray = <p>Please start adding ingredients!</p>;\n  }\n\n  return (\n    <div className={classes.Burger}>\n      <BurgerIngredient type=\"bread-top\" />\n      {ingredientsArray}\n      <BurgerIngredient type=\"bread-bottom\" />\n    </div>\n  );\n};\n\nexport default withRouter(burger);\n"]},"metadata":{},"sourceType":"module"}