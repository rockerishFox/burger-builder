{"ast":null,"code":"var _jsxFileName = \"/Users/deliacsiki/Projects/React/_Git/Burger Builder/burger-builder/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.module.css\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport axios from \"../../../axios-orders\";\nimport Input from \"../../../components//UI//Input/Input\";\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your name\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 3\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Street\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"ZIP Code\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Country\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Email\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryTime: {\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: \"asap\",\n              displayValue: \"ASAP\"\n            }, {\n              value: \"normal\",\n              displayValue: \"Normal\"\n            }]\n          },\n          valid: true,\n          value: \"asap\"\n        }\n      },\n      loading: false,\n      isValid: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault(); // prevents default behaviour\n      //in our case it doesn't send a request and it doesn't reload the page\n\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let elem in this.state.orderForm) {\n        formData[elem] = this.state.orderForm[elem].value;\n      }\n\n      const order = {\n        ingredients: this.props.ings,\n        price: this.props.price,\n        // this would be calculated on the server in real apps\n        orderData: formData\n      };\n      axios.post(\"/orders.json\", order).then(response => {\n        this.setState({\n          loading: false\n        });\n        this.props.history.push(\"/\");\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.inputChangedHandler = (event, inputId) => {\n      const updatedOrderForm = { ...this.state.orderForm // this will not clone deeply\n\n      }; // updatedOrderForm is a copy of orderForm and does not refer to original object\n      // but, since we have nested objects, those objects are still actually pointers, so they are not cloned\n      // modifying those nested objects will result in modifying the original saved value\n      // therefore we must copy the nested item we use as well\n\n      const updatedFormElement = { ...updatedOrderForm[inputId]\n      };\n      updatedFormElement.value = event.target.value;\n      if (updatedFormElement.validation) updatedFormElement.valid = this.validate(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputId] = updatedFormElement;\n      let validForm = true;\n\n      for (let input in updatedOrderForm) {\n        validForm = updatedOrderForm[input].valid && validForm;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        isValid: validForm\n      });\n    };\n  }\n\n  validate(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 7\n      }\n    }, formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      showValidation: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.isValid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }\n    }, \"ORDER\"));\n\n    if (this.state.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 14\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.ContactData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }\n    }, \"Enter your contact data\"), form);\n  }\n\n}\n\nconst mapStateToProp = state => {\n  return {\n    ings: state.ingredients,\n    price: state.totalPrice\n  };\n};\n\nexport default connect(mapStateToProp)(ContactData);","map":{"version":3,"sources":["/Users/deliacsiki/Projects/React/_Git/Burger Builder/burger-builder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","connect","Button","classes","Spinner","axios","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","touched","street","zipCode","maxLength","country","email","deliveryTime","options","displayValue","loading","isValid","orderHandler","event","preventDefault","setState","formData","elem","order","ingredients","props","ings","price","orderData","post","then","response","history","push","catch","error","inputChangedHandler","inputId","updatedOrderForm","updatedFormElement","target","validate","validForm","input","rules","trim","length","render","formElementsArray","key","id","config","form","map","formElement","mapStateToProp","totalPrice"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,OAAP,MAAoB,wCAApB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,KAAP,MAAkB,sCAAlB;;AAIA,MAAMC,WAAN,SAA0BP,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAClCQ,KADkC,GAC1B;AACNC,MAAAA,SAAS,EAAE;AACTC,QAAAA,IAAI,EAAE;AACJC,UAAAA,WAAW,EAAE,OADT;AAEJC,UAAAA,aAAa,EAAE;AACbC,YAAAA,IAAI,EAAE,MADO;AAEbC,YAAAA,WAAW,EAAE;AAFA,WAFX;AAMJC,UAAAA,KAAK,EAAE,EANH;AAOJC,UAAAA,UAAU,EAAE;AACVC,YAAAA,QAAQ,EAAE,IADA;AAEVC,YAAAA,SAAS,EAAE;AAFD,WAPR;AAWJC,UAAAA,KAAK,EAAE,KAXH;AAYJC,UAAAA,OAAO,EAAE;AAZL,SADG;AAeTC,QAAAA,MAAM,EAAE;AACNV,UAAAA,WAAW,EAAE,OADP;AAENC,UAAAA,aAAa,EAAE;AACbC,YAAAA,IAAI,EAAE,MADO;AAEbC,YAAAA,WAAW,EAAE;AAFA,WAFT;AAMNC,UAAAA,KAAK,EAAE,EAND;AAONC,UAAAA,UAAU,EAAE;AACVC,YAAAA,QAAQ,EAAE;AADA,WAPN;AAUNE,UAAAA,KAAK,EAAE,KAVD;AAWNC,UAAAA,OAAO,EAAE;AAXH,SAfC;AA4BTE,QAAAA,OAAO,EAAE;AACPX,UAAAA,WAAW,EAAE,OADN;AAEPC,UAAAA,aAAa,EAAE;AACbC,YAAAA,IAAI,EAAE,MADO;AAEbC,YAAAA,WAAW,EAAE;AAFA,WAFR;AAMPC,UAAAA,KAAK,EAAE,EANA;AAOPC,UAAAA,UAAU,EAAE;AACVC,YAAAA,QAAQ,EAAE,IADA;AAEVC,YAAAA,SAAS,EAAE,CAFD;AAGVK,YAAAA,SAAS,EAAE;AAHD,WAPL;AAYPJ,UAAAA,KAAK,EAAE,KAZA;AAaPC,UAAAA,OAAO,EAAE;AAbF,SA5BA;AA2CTI,QAAAA,OAAO,EAAE;AACPb,UAAAA,WAAW,EAAE,OADN;AAEPC,UAAAA,aAAa,EAAE;AACbC,YAAAA,IAAI,EAAE,MADO;AAEbC,YAAAA,WAAW,EAAE;AAFA,WAFR;AAMPC,UAAAA,KAAK,EAAE,EANA;AAOPC,UAAAA,UAAU,EAAE;AACVC,YAAAA,QAAQ,EAAE;AADA,WAPL;AAUPE,UAAAA,KAAK,EAAE,KAVA;AAWPC,UAAAA,OAAO,EAAE;AAXF,SA3CA;AAwDTK,QAAAA,KAAK,EAAE;AACLd,UAAAA,WAAW,EAAE,OADR;AAELC,UAAAA,aAAa,EAAE;AACbC,YAAAA,IAAI,EAAE,OADO;AAEbC,YAAAA,WAAW,EAAE;AAFA,WAFV;AAMLC,UAAAA,KAAK,EAAE,EANF;AAOLC,UAAAA,UAAU,EAAE;AACVC,YAAAA,QAAQ,EAAE;AADA,WAPP;AAULE,UAAAA,KAAK,EAAE,KAVF;AAWLC,UAAAA,OAAO,EAAE;AAXJ,SAxDE;AAqETM,QAAAA,YAAY,EAAE;AACZf,UAAAA,WAAW,EAAE,QADD;AAEZC,UAAAA,aAAa,EAAE;AACbe,YAAAA,OAAO,EAAE,CACP;AACEZ,cAAAA,KAAK,EAAE,MADT;AAEEa,cAAAA,YAAY,EAAE;AAFhB,aADO,EAKP;AACEb,cAAAA,KAAK,EAAE,QADT;AAEEa,cAAAA,YAAY,EAAE;AAFhB,aALO;AADI,WAFH;AAcZT,UAAAA,KAAK,EAAE,IAdK;AAeZJ,UAAAA,KAAK,EAAE;AAfK;AArEL,OADL;AAwFNc,MAAAA,OAAO,EAAE,KAxFH;AAyFNC,MAAAA,OAAO,EAAE;AAzFH,KAD0B;;AAAA,SA6FlCC,YA7FkC,GA6FlBC,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACC,cAAN,GADwB,CACA;AACxB;;AAEA,WAAKC,QAAL,CAAc;AAAEL,QAAAA,OAAO,EAAE;AAAX,OAAd;AAEA,YAAMM,QAAQ,GAAG,EAAjB;;AACA,WAAK,IAAIC,IAAT,IAAiB,KAAK5B,KAAL,CAAWC,SAA5B,EAAuC;AACrC0B,QAAAA,QAAQ,CAACC,IAAD,CAAR,GAAiB,KAAK5B,KAAL,CAAWC,SAAX,CAAqB2B,IAArB,EAA2BrB,KAA5C;AACD;;AAED,YAAMsB,KAAK,GAAG;AACZC,QAAAA,WAAW,EAAE,KAAKC,KAAL,CAAWC,IADZ;AAEZC,QAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE,KAFN;AAEa;AACzBC,QAAAA,SAAS,EAAEP;AAHC,OAAd;AAMA9B,MAAAA,KAAK,CACFsC,IADH,CACQ,cADR,EACwBN,KADxB,EAEGO,IAFH,CAESC,QAAD,IAAc;AAClB,aAAKX,QAAL,CAAc;AAAEL,UAAAA,OAAO,EAAE;AAAX,SAAd;AACA,aAAKU,KAAL,CAAWO,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACD,OALH,EAMGC,KANH,CAMUC,KAAD,IAAW;AAChB,aAAKf,QAAL,CAAc;AAAEL,UAAAA,OAAO,EAAE;AAAX,SAAd;AACD,OARH;AASD,KAvHiC;;AAAA,SAwIlCqB,mBAxIkC,GAwIZ,CAAClB,KAAD,EAAQmB,OAAR,KAAoB;AACxC,YAAMC,gBAAgB,GAAG,EACvB,GAAG,KAAK5C,KAAL,CAAWC,SADS,CACE;;AADF,OAAzB,CADwC,CAIxC;AACA;AACA;AACA;;AACA,YAAM4C,kBAAkB,GAAG,EAAE,GAAGD,gBAAgB,CAACD,OAAD;AAArB,OAA3B;AAEAE,MAAAA,kBAAkB,CAACtC,KAAnB,GAA2BiB,KAAK,CAACsB,MAAN,CAAavC,KAAxC;AAEA,UAAIsC,kBAAkB,CAACrC,UAAvB,EACEqC,kBAAkB,CAAClC,KAAnB,GAA2B,KAAKoC,QAAL,CACzBF,kBAAkB,CAACtC,KADM,EAEzBsC,kBAAkB,CAACrC,UAFM,CAA3B;AAKFqC,MAAAA,kBAAkB,CAACjC,OAAnB,GAA6B,IAA7B;AACAgC,MAAAA,gBAAgB,CAACD,OAAD,CAAhB,GAA4BE,kBAA5B;AAEA,UAAIG,SAAS,GAAG,IAAhB;;AACA,WAAK,IAAIC,KAAT,IAAkBL,gBAAlB,EAAoC;AAChCI,QAAAA,SAAS,GAAGJ,gBAAgB,CAACK,KAAD,CAAhB,CAAwBtC,KAAxB,IAAiCqC,SAA7C;AACH;;AAED,WAAKtB,QAAL,CAAc;AAAEzB,QAAAA,SAAS,EAAE2C,gBAAb;AAA+BtB,QAAAA,OAAO,EAAE0B;AAAxC,OAAd;AACD,KAnKiC;AAAA;;AAyHlCD,EAAAA,QAAQ,CAACxC,KAAD,EAAQ2C,KAAR,EAAe;AACrB,QAAI5B,OAAO,GAAG,IAAd;;AAEA,QAAI4B,KAAK,CAACzC,QAAV,EAAoB;AAClBa,MAAAA,OAAO,GAAGf,KAAK,CAAC4C,IAAN,OAAiB,EAAjB,IAAuB7B,OAAjC;AACD;;AACD,QAAI4B,KAAK,CAACxC,SAAV,EAAqB;AACnBY,MAAAA,OAAO,GAAGf,KAAK,CAAC6C,MAAN,IAAgBF,KAAK,CAACxC,SAAtB,IAAmCY,OAA7C;AACD;;AACD,QAAI4B,KAAK,CAACnC,SAAV,EAAqB;AACnBO,MAAAA,OAAO,GAAGf,KAAK,CAAC6C,MAAN,IAAgBF,KAAK,CAACnC,SAAtB,IAAmCO,OAA7C;AACD;;AACD,WAAOA,OAAP;AACD;;AA+BD+B,EAAAA,MAAM,GAAG;AACP,UAAMC,iBAAiB,GAAG,EAA1B;;AACA,SAAK,IAAIC,GAAT,IAAgB,KAAKvD,KAAL,CAAWC,SAA3B,EAAsC;AACpCqD,MAAAA,iBAAiB,CAACf,IAAlB,CAAuB;AACrBiB,QAAAA,EAAE,EAAED,GADiB;AAErBE,QAAAA,MAAM,EAAE,KAAKzD,KAAL,CAAWC,SAAX,CAAqBsD,GAArB;AAFa,OAAvB;AAID;;AACD,QAAIG,IAAI,gBACN;AAAM,MAAA,QAAQ,EAAE,KAAKnC,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG+B,iBAAiB,CAACK,GAAlB,CAAuBC,WAAD,iBACrB,oBAAC,KAAD;AACE,MAAA,GAAG,EAAEA,WAAW,CAACJ,EADnB;AAEE,MAAA,WAAW,EAAEI,WAAW,CAACH,MAAZ,CAAmBtD,WAFlC;AAGE,MAAA,aAAa,EAAEyD,WAAW,CAACH,MAAZ,CAAmBrD,aAHpC;AAIE,MAAA,KAAK,EAAEwD,WAAW,CAACH,MAAZ,CAAmBlD,KAJ5B;AAKE,MAAA,OAAO,EAAE,CAACqD,WAAW,CAACH,MAAZ,CAAmB9C,KAL/B;AAME,MAAA,cAAc,EAAEiD,WAAW,CAACH,MAAZ,CAAmBjD,UANrC;AAOE,MAAA,OAAO,EAAEoD,WAAW,CAACH,MAAZ,CAAmB7C,OAP9B;AAQE,MAAA,OAAO,EAAGY,KAAD,IAAW,KAAKkB,mBAAL,CAAyBlB,KAAzB,EAAgCoC,WAAW,CAACJ,EAA5C,CARtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,eAaE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,QAAQ,EAAE,CAAC,KAAKxD,KAAL,CAAWsB,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAbF,CADF;;AAmBA,QAAI,KAAKtB,KAAL,CAAWqB,OAAf,EAAwB;AACtBqC,MAAAA,IAAI,gBAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AACD,wBACE;AAAK,MAAA,SAAS,EAAE/D,OAAO,CAACI,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,EAEG2D,IAFH,CADF;AAMD;;AAzMiC;;AA6MpC,MAAMG,cAAc,GAAI7D,KAAD,IAAW;AAChC,SAAO;AACLgC,IAAAA,IAAI,EAAEhC,KAAK,CAAC8B,WADP;AAELG,IAAAA,KAAK,EAAEjC,KAAK,CAAC8D;AAFR,GAAP;AAID,CALD;;AAQA,eAAerE,OAAO,CAACoE,cAAD,CAAP,CAAwB9D,WAAxB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport {connect} from 'react-redux'\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.module.css\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport axios from \"../../../axios-orders\";\nimport Input from \"../../../components//UI//Input/Input\";\n\n\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your name\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 3,\n        },\n        valid: false,\n        touched: false,\n      },\n      street: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Street\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      zipCode: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"ZIP Code\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5,\n        },\n        valid: false,\n        touched: false,\n      },\n      country: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Country\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Email\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      deliveryTime: {\n        elementType: \"select\",\n        elementConfig: {\n          options: [\n            {\n              value: \"asap\",\n              displayValue: \"ASAP\",\n            },\n            {\n              value: \"normal\",\n              displayValue: \"Normal\",\n            },\n          ],\n        },\n        valid: true,\n        value: \"asap\",\n      },\n    },\n    loading: false,\n    isValid: false,\n  };\n\n  orderHandler = (event) => {\n    event.preventDefault(); // prevents default behaviour\n    //in our case it doesn't send a request and it doesn't reload the page\n\n    this.setState({ loading: true });\n\n    const formData = {};\n    for (let elem in this.state.orderForm) {\n      formData[elem] = this.state.orderForm[elem].value;\n    }\n\n    const order = {\n      ingredients: this.props.ings,\n      price: this.props.price, // this would be calculated on the server in real apps\n      orderData: formData,\n    };\n\n    axios\n      .post(\"/orders.json\", order)\n      .then((response) => {\n        this.setState({ loading: false });\n        this.props.history.push(\"/\");\n      })\n      .catch((error) => {\n        this.setState({ loading: false });\n      });\n  };\n\n  validate(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n    return isValid;\n  }\n\n  inputChangedHandler = (event, inputId) => {\n    const updatedOrderForm = {\n      ...this.state.orderForm, // this will not clone deeply\n    };\n    // updatedOrderForm is a copy of orderForm and does not refer to original object\n    // but, since we have nested objects, those objects are still actually pointers, so they are not cloned\n    // modifying those nested objects will result in modifying the original saved value\n    // therefore we must copy the nested item we use as well\n    const updatedFormElement = { ...updatedOrderForm[inputId] };\n\n    updatedFormElement.value = event.target.value;\n\n    if (updatedFormElement.validation)\n      updatedFormElement.valid = this.validate(\n        updatedFormElement.value,\n        updatedFormElement.validation\n      );\n\n    updatedFormElement.touched = true;\n    updatedOrderForm[inputId] = updatedFormElement;\n\n    let validForm = true;\n    for (let input in updatedOrderForm) {\n        validForm = updatedOrderForm[input].valid && validForm;\n    }\n\n    this.setState({ orderForm: updatedOrderForm, isValid: validForm });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key],\n      });\n    }\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map((formElement) => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            showValidation={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\n          />\n        ))}\n        <Button btnType=\"Success\" disabled={!this.state.isValid}>\n          ORDER\n        </Button>\n      </form>\n    );\n    if (this.state.loading) {\n      form = <Spinner />;\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your contact data</h4>\n        {form}\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProp = (state) => {\n  return {\n    ings: state.ingredients,\n    price: state.totalPrice\n  };\n};\n\n\nexport default connect(mapStateToProp)(ContactData);\n"]},"metadata":{},"sourceType":"module"}